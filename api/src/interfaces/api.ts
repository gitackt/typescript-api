// tslint:disable
/**
 * typescript API
 * typescript-api
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import { Configuration } from './configuration'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base'

/**
 *
 * @export
 * @interface Category
 */
export interface Category {
  /**
   *
   * @type {number}
   * @memberof Category
   */
  id: number
  /**
   *
   * @type {number}
   * @memberof Category
   */
  createUserId: number
  /**
   *
   * @type {string}
   * @memberof Category
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof Category
   */
  createdAt?: string
  /**
   *
   * @type {string}
   * @memberof Category
   */
  updatedAt?: string
}
/**
 *
 * @export
 * @interface Tag
 */
export interface Tag {
  /**
   *
   * @type {number}
   * @memberof Tag
   */
  id: number
  /**
   *
   * @type {number}
   * @memberof Tag
   */
  createUserId: number
  /**
   *
   * @type {string}
   * @memberof Tag
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof Tag
   */
  createdAt?: string
  /**
   *
   * @type {string}
   * @memberof Tag
   */
  updatedAt?: string
}
/**
 *
 * @export
 * @interface Term
 */
export interface Term {
  /**
   *
   * @type {string}
   * @memberof Term
   */
  id?: string
}
/**
 *
 * @export
 * @interface Topic
 */
export interface Topic {
  /**
   *
   * @type {number}
   * @memberof Topic
   */
  id: number
  /**
   *
   * @type {number}
   * @memberof Topic
   */
  userId: number
  /**
   *
   * @type {string}
   * @memberof Topic
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof Topic
   */
  content: string
  /**
   *
   * @type {string}
   * @memberof Topic
   */
  imageUrl?: string
  /**
   *
   * @type {boolean}
   * @memberof Topic
   */
  isDraft?: boolean
  /**
   *
   * @type {boolean}
   * @memberof Topic
   */
  isArchived?: boolean
  /**
   *
   * @type {string}
   * @memberof Topic
   */
  createdAt?: string
  /**
   *
   * @type {string}
   * @memberof Topic
   */
  updatedAt?: string
  /**
   *
   * @type {Array<Category>}
   * @memberof Topic
   */
  categories: Array<Category>
  /**
   *
   * @type {Array<Tag>}
   * @memberof Topic
   */
  tags: Array<Tag>
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {number}
   * @memberof User
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof User
   */
  uuid?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  firebaseUuid: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  email: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  imageUrl?: string
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  isActive?: boolean
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  isPremium?: boolean
  /**
   *
   * @type {string}
   * @memberof User
   */
  userName?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  discription?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  createdAt?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  updatedAt?: string
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * get categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategories: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/categories`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * get category
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategory: async (id: number, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling getCategory.',
        )
      }
      const localVarPath = `/categories/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * get tag
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTag: async (id: number, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling getTag.',
        )
      }
      const localVarPath = `/tags/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * get tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTags: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/tags`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * get topic
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopic: async (id: number, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling getTopic.',
        )
      }
      const localVarPath = `/topics/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * get topics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopics: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/topics`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * get user
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: async (id: number, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling getUser.',
        )
      }
      const localVarPath = `/users/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * get users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/users`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * post category
     * @param {Category} [category] create category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCategory: async (category?: Category, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/categories`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof category !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(category !== undefined ? category : {})
        : category || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * post tag
     * @param {Tag} [tag] create tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postTag: async (tag?: Tag, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/tags`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof tag !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(tag !== undefined ? tag : {})
        : tag || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * post topic
     * @param {Topic} [topic] create topic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postTopic: async (topic?: Topic, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/topics`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof topic !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(topic !== undefined ? topic : {})
        : topic || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * post user
     * @param {User} [user] create user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postUser: async (user?: User, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/users`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof user !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(user !== undefined ? user : {})
        : user || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * put category
     * @param {number} id id
     * @param {Category} [category] create category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCategory: async (
      id: number,
      category?: Category,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling putCategory.',
        )
      }
      const localVarPath = `/categories/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof category !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(category !== undefined ? category : {})
        : category || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * put tag
     * @param {number} id id
     * @param {Tag} [tag] create tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putTag: async (id: number, tag?: Tag, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling putTag.',
        )
      }
      const localVarPath = `/tags/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof tag !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(tag !== undefined ? tag : {})
        : tag || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * put topic
     * @param {number} id id
     * @param {Topic} [topic] create topic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putTopic: async (id: number, topic?: Topic, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling putTopic.',
        )
      }
      const localVarPath = `/topics/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof topic !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(topic !== undefined ? topic : {})
        : topic || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * put user
     * @param {number} id id
     * @param {User} [user] create user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUser: async (id: number, user?: User, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling putUser.',
        )
      }
      const localVarPath = `/users/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof user !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(user !== undefined ? user : {})
        : user || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  return {
    /**
     * get categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCategories(
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getCategories(
        options,
      )
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * get category
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCategory(
      id: number,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getCategory(
        id,
        options,
      )
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * get tag
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTag(
      id: number,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getTag(id, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * get tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTags(
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getTags(options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * get topic
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTopic(
      id: number,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Topic>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getTopic(
        id,
        options,
      )
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * get topics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTopics(
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Topic>>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getTopics(options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * get user
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUser(
      id: number,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getUser(
        id,
        options,
      )
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * get users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUsers(
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getUsers(options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * post category
     * @param {Category} [category] create category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postCategory(
      category?: Category,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postCategory(
        category,
        options,
      )
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * post tag
     * @param {Tag} [tag] create tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postTag(
      tag?: Tag,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postTag(
        tag,
        options,
      )
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * post topic
     * @param {Topic} [topic] create topic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postTopic(
      topic?: Topic,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Topic>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postTopic(
        topic,
        options,
      )
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * post user
     * @param {User} [user] create user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postUser(
      user?: User,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postUser(
        user,
        options,
      )
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * put category
     * @param {number} id id
     * @param {Category} [category] create category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putCategory(
      id: number,
      category?: Category,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putCategory(
        id,
        category,
        options,
      )
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * put tag
     * @param {number} id id
     * @param {Tag} [tag] create tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putTag(
      id: number,
      tag?: Tag,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putTag(
        id,
        tag,
        options,
      )
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * put topic
     * @param {number} id id
     * @param {Topic} [topic] create topic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putTopic(
      id: number,
      topic?: Topic,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Topic>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putTopic(
        id,
        topic,
        options,
      )
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * put user
     * @param {number} id id
     * @param {User} [user] create user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putUser(
      id: number,
      user?: User,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putUser(
        id,
        user,
        options,
      )
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     * get categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategories(options?: any): AxiosPromise<Category> {
      return DefaultApiFp(configuration)
        .getCategories(options)
        .then(request => request(axios, basePath))
    },
    /**
     * get category
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategory(id: number, options?: any): AxiosPromise<Category> {
      return DefaultApiFp(configuration)
        .getCategory(id, options)
        .then(request => request(axios, basePath))
    },
    /**
     * get tag
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTag(id: number, options?: any): AxiosPromise<Tag> {
      return DefaultApiFp(configuration)
        .getTag(id, options)
        .then(request => request(axios, basePath))
    },
    /**
     * get tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTags(options?: any): AxiosPromise<Tag> {
      return DefaultApiFp(configuration)
        .getTags(options)
        .then(request => request(axios, basePath))
    },
    /**
     * get topic
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopic(id: number, options?: any): AxiosPromise<Topic> {
      return DefaultApiFp(configuration)
        .getTopic(id, options)
        .then(request => request(axios, basePath))
    },
    /**
     * get topics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopics(options?: any): AxiosPromise<Array<Topic>> {
      return DefaultApiFp(configuration)
        .getTopics(options)
        .then(request => request(axios, basePath))
    },
    /**
     * get user
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(id: number, options?: any): AxiosPromise<User> {
      return DefaultApiFp(configuration)
        .getUser(id, options)
        .then(request => request(axios, basePath))
    },
    /**
     * get users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers(options?: any): AxiosPromise<User> {
      return DefaultApiFp(configuration)
        .getUsers(options)
        .then(request => request(axios, basePath))
    },
    /**
     * post category
     * @param {Category} [category] create category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCategory(category?: Category, options?: any): AxiosPromise<Category> {
      return DefaultApiFp(configuration)
        .postCategory(category, options)
        .then(request => request(axios, basePath))
    },
    /**
     * post tag
     * @param {Tag} [tag] create tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postTag(tag?: Tag, options?: any): AxiosPromise<Tag> {
      return DefaultApiFp(configuration)
        .postTag(tag, options)
        .then(request => request(axios, basePath))
    },
    /**
     * post topic
     * @param {Topic} [topic] create topic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postTopic(topic?: Topic, options?: any): AxiosPromise<Topic> {
      return DefaultApiFp(configuration)
        .postTopic(topic, options)
        .then(request => request(axios, basePath))
    },
    /**
     * post user
     * @param {User} [user] create user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postUser(user?: User, options?: any): AxiosPromise<User> {
      return DefaultApiFp(configuration)
        .postUser(user, options)
        .then(request => request(axios, basePath))
    },
    /**
     * put category
     * @param {number} id id
     * @param {Category} [category] create category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCategory(id: number, category?: Category, options?: any): AxiosPromise<Category> {
      return DefaultApiFp(configuration)
        .putCategory(id, category, options)
        .then(request => request(axios, basePath))
    },
    /**
     * put tag
     * @param {number} id id
     * @param {Tag} [tag] create tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putTag(id: number, tag?: Tag, options?: any): AxiosPromise<Tag> {
      return DefaultApiFp(configuration)
        .putTag(id, tag, options)
        .then(request => request(axios, basePath))
    },
    /**
     * put topic
     * @param {number} id id
     * @param {Topic} [topic] create topic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putTopic(id: number, topic?: Topic, options?: any): AxiosPromise<Topic> {
      return DefaultApiFp(configuration)
        .putTopic(id, topic, options)
        .then(request => request(axios, basePath))
    },
    /**
     * put user
     * @param {number} id id
     * @param {User} [user] create user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUser(id: number, user?: User, options?: any): AxiosPromise<User> {
      return DefaultApiFp(configuration)
        .putUser(id, user, options)
        .then(request => request(axios, basePath))
    },
  }
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   * get categories
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getCategories(options?: any) {
    return DefaultApiFp(this.configuration)
      .getCategories(options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * get category
   * @param {number} id id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getCategory(id: number, options?: any) {
    return DefaultApiFp(this.configuration)
      .getCategory(id, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * get tag
   * @param {number} id id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getTag(id: number, options?: any) {
    return DefaultApiFp(this.configuration)
      .getTag(id, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * get tags
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getTags(options?: any) {
    return DefaultApiFp(this.configuration)
      .getTags(options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * get topic
   * @param {number} id id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getTopic(id: number, options?: any) {
    return DefaultApiFp(this.configuration)
      .getTopic(id, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * get topics
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getTopics(options?: any) {
    return DefaultApiFp(this.configuration)
      .getTopics(options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * get user
   * @param {number} id id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getUser(id: number, options?: any) {
    return DefaultApiFp(this.configuration)
      .getUser(id, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * get users
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getUsers(options?: any) {
    return DefaultApiFp(this.configuration)
      .getUsers(options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * post category
   * @param {Category} [category] create category
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public postCategory(category?: Category, options?: any) {
    return DefaultApiFp(this.configuration)
      .postCategory(category, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * post tag
   * @param {Tag} [tag] create tag
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public postTag(tag?: Tag, options?: any) {
    return DefaultApiFp(this.configuration)
      .postTag(tag, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * post topic
   * @param {Topic} [topic] create topic
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public postTopic(topic?: Topic, options?: any) {
    return DefaultApiFp(this.configuration)
      .postTopic(topic, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * post user
   * @param {User} [user] create user
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public postUser(user?: User, options?: any) {
    return DefaultApiFp(this.configuration)
      .postUser(user, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * put category
   * @param {number} id id
   * @param {Category} [category] create category
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public putCategory(id: number, category?: Category, options?: any) {
    return DefaultApiFp(this.configuration)
      .putCategory(id, category, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * put tag
   * @param {number} id id
   * @param {Tag} [tag] create tag
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public putTag(id: number, tag?: Tag, options?: any) {
    return DefaultApiFp(this.configuration)
      .putTag(id, tag, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * put topic
   * @param {number} id id
   * @param {Topic} [topic] create topic
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public putTopic(id: number, topic?: Topic, options?: any) {
    return DefaultApiFp(this.configuration)
      .putTopic(id, topic, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * put user
   * @param {number} id id
   * @param {User} [user] create user
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public putUser(id: number, user?: User, options?: any) {
    return DefaultApiFp(this.configuration)
      .putUser(id, user, options)
      .then(request => request(this.axios, this.basePath))
  }
}
