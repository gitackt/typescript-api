openapi: 3.0.0
info:
  description: typescript-api
  title: typescript API
  version: 1.0.0
servers:
  - url: 'http://localhost:8080/'
paths:
  /users:
    get:
      description: get users
      operationId: get users
      responses:
        '200':
          $ref: '#/components/responses/users'
    post:
      description: post user
      operationId: post user
      requestBody:
        $ref: '#/components/requestBodies/createUser'
      responses:
        '200':
          $ref: '#/components/responses/user'
  /users/{id}:
    get:
      description: get user
      operationId: get user
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/user'
    put:
      description: put user
      operationId: put user
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        $ref: '#/components/requestBodies/createUser'
      responses:
        '200':
          $ref: '#/components/responses/user'
  /topics:
    get:
      description: get topics
      operationId: get topics
      parameters:
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          $ref: '#/components/responses/topics'
    post:
      description: post topic
      operationId: post topic
      requestBody:
        $ref: '#/components/requestBodies/createTopic'
      responses:
        '200':
          $ref: '#/components/responses/topic'
  /topics/{id}:
    get:
      description: get topic
      operationId: get topic
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/topic'
    put:
      description: put topic
      operationId: put topic
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        $ref: '#/components/requestBodies/createTopic'
      responses:
        '200':
          $ref: '#/components/responses/topic'
components:
  parameters:
    id:
      name: id
      in: path
      description: id
      required: true
      schema:
        type: integer
        minimum: 0
    order:
      name: order
      in: query
      description: order
      required: true
      schema:
        type: string
        enum:
          - ASC
          - DESC
    limit:
      name: limit
      in: query
      description: limit
      required: true
      schema:
        type: integer
    offset:
      name: offset
      in: query
      description: offset
      required: true
      schema:
        type: integer
  schemas:
    user:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        name:
          type: string
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
      required:
        - id
        - email
        - name
    topic:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        title:
          type: string
        content:
          type: string
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
        categories:
          type: array
          items:
            $ref: '#/components/schemas/category'
      required:
        - id
        - userId
        - title
        - content
    category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
      required:
        - id
        - createUserId
        - name
  requestBodies:
    createUser:
      description: create user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/user'
    createTopic:
      description: create topic
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/topic'
  responses:
    users:
      description: users
      content:
        application/json:
          schema:
            $ref: '#/components/responses/user'
    user:
      description: user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/user'
    topics:
      description: topics
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/responses/topic'
    topic:
      description: topic
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/topic'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
